{"version":3,"file":"static/js/456.ef15a85b.chunk.js","mappings":"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","sources":["components/spinner/Spinner.js","schema/contactSchema.js","schema/propertySchema.js","schema/leadSchema.js","schema/userSchema.js","schema/loginSchema.js","schema/emailSchema.js","schema/document.js","schema/phoneCallSchema.js","schema/textMsgSchema.js","schema/taskSchema.js","schema/meetingSchema.js","components/footer/FooterAuth.js","layouts/auth/Default.js","views/auth/signIn/index.jsx"],"sourcesContent":["import './style.css';\r\nconst Spinner = () => <div className=\"loader\"></div>;\r\n\r\nexport default Spinner;","import * as yup from 'yup'\r\n\r\nexport const contactSchema = yup.object({\r\n    // 1. Basic Information\r\n    firstName: yup.string().min(2).required('First Name is required'),\r\n    lastName: yup.string().min(2).required('Last Name is required'),\r\n    title: yup.string().required('Title is required'),\r\n    email: yup.string().email().required('Email is required'),\r\n    phoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required('Phonenumber is Required'),\r\n    mobileNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').notRequired(),\r\n    physicalAddress: yup.string().required('Physical address is required'),\r\n    mailingAddress: yup.string(),\r\n    preferredContactMethod: yup.string().required('Preferred contact method is required'),\r\n    // 2.Lead Source Information\r\n    leadSource: yup.string(),\r\n    referralSource: yup.string(),\r\n    campaignSource: yup.string(),\r\n    // 3. Status and Classifications\r\n    leadStatus: yup.string(),\r\n    leadRating: yup.number(),\r\n    leadConversionProbability: yup.string(),\r\n    // 5. History:\r\n    emailHistory: yup.string(),\r\n    phoneCallHistory: yup.string(),\r\n    meetingHistory: yup.string(),\r\n    notesandComments: yup.string(),\r\n    // 6. Tags or Categories\r\n    tagsOrLabelsForcategorizingcontacts: yup.string(),\r\n    // 7. Important Dates:\r\n    birthday: yup.date(),\r\n    anniversary: yup.date(),\r\n    keyMilestones: yup.string(),\r\n    // 8. Additional Personal Information\r\n    dob: yup.string(),\r\n    gender: yup.string(),\r\n    occupation: yup.string(),\r\n    interestsOrHobbies: yup.string(),\r\n    // 9. Preferred  Communication Preferences:\r\n    communicationFrequency: yup.string(),\r\n    preferences: yup.string(),\r\n    // 10. Social Media Profiles:\r\n    linkedInProfile: yup.string(),\r\n    facebookProfile: yup.string(),\r\n    twitterHandle: yup.string(),\r\n    otherProfiles: yup.string(),\r\n    // 11. Lead Assignment and Team Collaboration:\r\n    agentOrTeamMember: yup.string(),\r\n    internalNotesOrComments: yup.string(),\r\n    createBy: yup.string(),\r\n    // 12. Custom Fields:\r\n})","import * as yup from 'yup'\r\nconst currentYear = new Date().getFullYear()\r\n\r\nexport const propertySchema = yup.object({\r\n    // 1. basicPropertyInformation:\r\n    propertyType: yup.string().required(\"Property Type Is required\"),\r\n    propertyAddress: yup.string().required(\"Property Address Is required\"),\r\n    listingPrice: yup.string().required(\"Listing Price Is required\"),\r\n    squareFootage: yup.string().required(\"Square Footage Is required\"),\r\n    numberofBedrooms: yup.number().required(\"Number Of Bedrooms Is required\"),\r\n    numberofBathrooms: yup.number().required(\"Number Of Bathrooms Is required\"),\r\n    yearBuilt: yup.number().min(1000).max(currentYear).required(\"Year Built Is required\"),\r\n    propertyDescription: yup.string().required(\"Property Description Is required\"),\r\n    //2. Property Features and Amenities:\r\n    lotSize: yup.string(),\r\n    parkingAvailability: yup.string(),\r\n    appliancesIncluded: yup.string(),\r\n    heatingAndCoolingSystems: yup.string(),\r\n    flooringType: yup.string(),\r\n    exteriorFeatures: yup.string(),\r\n    communityAmenities: yup.string(),\r\n    //3. Media and Visuals:\r\n    propertyPhotos: yup.string(),\r\n    virtualToursOrVideos: yup.string(),\r\n    floorPlans: yup.string(),\r\n    propertyDocuments: yup.string(),\r\n    //4. Listing and Marketing Details:\r\n    listingStatus: yup.string(),\r\n    listingAgentOrTeam: yup.string(),\r\n    listingDate: yup.string(),\r\n    marketingDescription: yup.string(),\r\n    multipleListingService: yup.string(),\r\n    //5. Property History:\r\n    previousOwners: yup.number().min(0),\r\n    purchaseHistory: yup.string(),\r\n    //6. Financial Information:\r\n    propertyTaxes: yup.string(),\r\n    homeownersAssociation: yup.string(),\r\n    mortgageInformation: yup.string(),\r\n    //7. Contacts Associated with Property:\r\n    sellers: yup.string(),\r\n    buyers: yup.string(),\r\n    propertyManagers: yup.string(),\r\n    contractorsOrServiceProviders: yup.string(),\r\n    //8. Property Notes and Comments:\r\n    internalNotesOrComments: yup.string(),\r\n    //9. Custom Fields\r\n})","import * as yup from 'yup'\r\n\r\nexport const leadSchema = yup.object({\r\n    // Lead Information:\r\n    leadName: yup.string().required(\"Lead Name Is required\"),\r\n    leadEmail: yup.string().email().required(\"Lead Email Is required\"),\r\n    leadPhoneNumber: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Lead Phone Number Is required\"),\r\n    leadAddress: yup.string().required(\"Lead Address Is required\"),\r\n    // Lead Source and Details:\r\n    leadSource: yup.string(),\r\n    leadStatus: yup.string(),\r\n    leadSourceDetails: yup.string(),\r\n    leadCampaign: yup.string(),\r\n    leadSourceChannel: yup.string(),\r\n    leadSourceMedium: yup.string(),\r\n    leadSourceCampaign: yup.string(),\r\n    leadSourceReferral: yup.string(),\r\n    // Lead Assignment and Ownership:\r\n    leadAssignedAgent: yup.string(),\r\n    leadOwner: yup.string(),\r\n    leadCommunicationPreferences: yup.string(),\r\n    // Lead Dates and Follow-up:\r\n    leadCreationDate: yup.date().required(\"Lead Creation Date Is required\"),\r\n    leadConversionDate: yup.date().required(\"Lead Conversion Date Is required\"),\r\n    leadFollowUpDate: yup.date().required(\"lead Follow Up Date  Is required\"),\r\n    leadFollowUpStatus: yup.string(),\r\n    // Lead Scoring and Nurturing:\r\n    leadScore: yup.number().required(\"Lead Score Is required\"),\r\n    leadNurturingWorkflow: yup.string(),\r\n    leadEngagementLevel: yup.string(),\r\n    leadConversionRate: yup.number().required(\"lead Conversion Rate Is required\"),\r\n    leadNurturingStage: yup.string(),\r\n    leadNextAction: yup.string(),\r\n})\r\n","import * as yup from 'yup'\r\n\r\nexport const userSchema = yup.object({\r\n    firstName: yup.string().required(\"First Name Is required\"),\r\n    lastName: yup.string(),\r\n    phoneNumber: yup.string().required(\"Phone Number Is required\").matches(/^\\d{10}$/, \"Phone Number must be exactly 10 digits\"),\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n})","import * as yup from 'yup'\r\n\r\nexport const loginSchema = yup.object({\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n    password: yup.string().required(\"Password Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const emailSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    recipient: yup.string().email().required(\"Recipient Is required\"),\r\n    cc: yup.string().email(),\r\n    bcc: yup.string().email(),\r\n    relatedToContact: yup.string(),\r\n    relatedToLead: yup.string(),\r\n    subject: yup.string(),\r\n    message: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\n\r\n// Define the yup schema for the main document\r\nexport const documentSchema = yup.object().shape({\r\n    folderName: yup.string().required('Folder Name is required'),\r\n    filename: yup.string().min(2, 'File Name Must Be At Least 2 Characters'),\r\n    createBy: yup.string().required()\r\n});\r\n\r\n","import * as yup from 'yup'\r\n\r\nexport const phoneCallSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    // recipient: yup.number().min(99999999, 'Phone number is invalid length').max(999999999999, 'Phone number is invalid').required(\"Recipient Is required\"),\r\n    recipient: yup.number().required(\"Recipient Is required\"),\r\n    callDuration: yup.string(),\r\n    callNotes: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n    category: yup.string()\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\nexport const textMsgSchema = yup.object({\r\n    sender: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Sender Is required\"),\r\n    to: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"To Is required\"),\r\n    message: yup.string(),\r\n    createFor: yup.string().required(\"Create By Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const TaskSchema = yup.object({\r\n    title: yup.string().required(\"Title Is required\"),\r\n    category: yup.string(),\r\n    description: yup.string(),\r\n    notes: yup.string(),\r\n    // assignmentTo: yup.string(),\r\n    // assignmentToLead: yup.string(),\r\n    reminder: yup.string(),\r\n    start: yup.string().required(\"Start Is required\"),\r\n    end: yup.string(),\r\n    backgroundColor: yup.string(),\r\n    borderColor: yup.string(),\r\n    textColor: yup.string(),\r\n    display: yup.string(),\r\n    url: yup.string(),\r\n    createBy: yup.string(),\r\n})","import * as yup from 'yup'\r\n\r\nexport const MeetingSchema = yup.object({\r\n    agenda: yup.string().required(\"Agenda Is required\"),\r\n    attendes: yup.array().of(yup.string().trim()),\r\n    attendesLead: yup.array().of(yup.string().trim()),\r\n    location: yup.string(),\r\n    related: yup.string(),\r\n    dateTime: yup.string().required(\"Date Time Is required\"),\r\n    notes: yup.string(),\r\n    createFor: yup.string(),\r\n    createdBy: yup.string(),\r\n})","/*eslint-disable*/\r\nimport React from \"react\";\r\nimport {\r\n  Flex,\r\n  Link,\r\n  List,\r\n  ListItem,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\n\r\nexport default function Footer() {\r\n  let textColor = useColorModeValue(\"gray.400\", \"white\");\r\n  let linkColor = useColorModeValue({ base: \"gray.400\", lg: \"gray.400\" }, \"gray.400\");\r\n  return (\r\n    <Flex\r\n      zIndex='3'\r\n      flexDirection={{\r\n        base: \"column\",\r\n        lg: \"row\",\r\n      }}\r\n      alignItems={{\r\n        base: \"center\",\r\n        xl: \"start\",\r\n      }}\r\n      justifyContent='space-between'\r\n      px={{ base: \"30px\", md: \"0px\" }}\r\n      pb='30px'>\r\n      <Text\r\n        color={textColor}\r\n        textAlign={{\r\n          base: \"center\",\r\n          xl: \"start\",\r\n        }}\r\n        mb={{ base: \"20px\", lg: \"0px\" }}>\r\n        {\" \"}\r\n        &copy; {1900 + new Date().getYear()}\r\n        <Text as='span' fontWeight='500' ms='4px'>\r\n          <Link\r\n            fontWeight='500'\r\n            target=\"_blank\"\r\n            color={textColor}\r\n            href='https://prolinkinfotech.com/'> Prolink Infotech.</Link> All Rights Reserved.\r\n        </Text>\r\n      </Text>\r\n      {/* <List display='flex'>\r\n        <ListItem\r\n          me={{\r\n            base: \"20px\",\r\n            md: \"44px\",\r\n          }}>\r\n          <Link\r\n            fontWeight='500'\r\n            color={linkColor}\r\n            href='mailto:hello@simmmple.com?ref=horizon-chakra-free'>\r\n            Support\r\n          </Link>\r\n        </ListItem>\r\n        <ListItem\r\n          me={{\r\n            base: \"20px\",\r\n            md: \"44px\",\r\n          }}>\r\n          <Link\r\n            fontWeight='500'\r\n            color={linkColor}\r\n            href='https://www.simmmple.com/licenses?ref=horizon-chakra-free'>\r\n            License\r\n          </Link>\r\n        </ListItem>\r\n        <ListItem\r\n          me={{\r\n            base: \"20px\",\r\n            md: \"44px\",\r\n          }}>\r\n          <Link\r\n            fontWeight='500'\r\n            color={linkColor}\r\n            href='https://simmmple.com/terms-of-service?ref=horizon-chakra-free'>\r\n            Terms of Use\r\n          </Link>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Link\r\n            fontWeight='500'\r\n            color={linkColor}\r\n            href='https://www.blog.simmmple.com/?ref=horizon-chakra-free'>\r\n            Blog\r\n          </Link>\r\n        </ListItem>\r\n      </List> */}\r\n    </Flex>\r\n  );\r\n}\r\n","// Chakra imports\r\nimport { Box, Flex } from \"@chakra-ui/react\";\r\nimport Footer from \"components/footer/FooterAuth\";\r\nimport FixedPlugin from \"components/fixedPlugin/FixedPlugin\";\r\nimport { Link } from \"react-router-dom\";\r\n// Custom components\r\n// Assets\r\n\r\nfunction AuthIllustration(props) {\r\n  const { children, illustrationBackground } = props;\r\n  // Chakra color mode\r\n  return (\r\n    <Flex h='max-content'>\r\n\r\n      <Flex\r\n        h={{\r\n          sm: \"initial\",\r\n          md: \"unset\",\r\n          lg: \"100vh\",\r\n          xl: \"97vh\",\r\n        }}\r\n        w='100%'\r\n        maxW={{ md: \"66%\", lg: \"1313px\" }}\r\n        mx='auto'\r\n        pt={{ sm: \"50px\", md: \"0px\" }}\r\n        px={{ lg: \"30px\", xl: \"0px\" }}\r\n        ps={{ xl: \"70px\" }}\r\n        justifyContent='center'\r\n        direction='column'>\r\n        {children}\r\n        <Box\r\n          display={{ base: \"none\", md: \"flex\" }}\r\n          h='100%'\r\n          minH='100vh'\r\n          w={{ lg: \"50vw\", \"2xl\": \"44vw\" }}\r\n          borderBottomLeftRadius={{ lg: \"120px\", xl: \"200px\" }}\r\n          justifyContent='center'\r\n          position='absolute'\r\n          flexDirection={'column'}\r\n          alignItems={'center'}\r\n          // bg={'black'}\r\n          overflow={'hidden'}\r\n          right='0px'>\r\n          <Link to=\"https://prolinkinfotech.com/\" target=\"_blank\" style={{ height: '50%', width: '50%' }} >\r\n            <Flex\r\n              bg={`url(${illustrationBackground})`}\r\n              justify='center'\r\n              align='center'\r\n              w='100%'\r\n              h='100%'\r\n              bgSize='cover'\r\n              bgPosition='50%'\r\n            />\r\n          </Link>\r\n          {/* <Box\r\n            border={'1px solid'}\r\n            p={4}\r\n            borderRadius={10}\r\n          >\r\n            Hi\r\n          </Box> */}\r\n        </Box>\r\n        <Footer />\r\n      </Flex>\r\n      {/* CHANGE THEME COLOR BUTTON */}\r\n      {/* <FixedPlugin /> */}\r\n    </Flex>\r\n  );\r\n}\r\n// PROPS\r\n\r\n// AuthIllustration.propTypes = {\r\n//   illustrationBackground: PropTypes.string,\r\n//   image: PropTypes.any,\r\n// };\r\n\r\nexport default AuthIllustration;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\n// Chakra imports\r\nimport {\r\n  Box,\r\n  Button, Checkbox, Flex,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Heading,\r\n  Icon,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Text,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\n// Custom components\r\nimport DefaultAuth from \"layouts/auth/Default\";\r\n// Assets\r\nimport illustration from \"assets/img/auth/PNG-02.png\";\r\n\r\nimport { MdOutlineRemoveRedEye } from \"react-icons/md\";\r\nimport { RiEyeCloseLine } from \"react-icons/ri\";\r\nimport { postApi } from \"services/api\";\r\nimport { loginSchema } from \"schema\";\r\nimport { toast } from \"react-toastify\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\n\r\nfunction SignIn() {\r\n  // Chakra color mode\r\n  const textColor = useColorModeValue(\"navy.700\", \"white\");\r\n  const textColorSecondary = \"gray.400\";\r\n  const brandStars = useColorModeValue(\"brand.500\", \"brand.400\");\r\n  const [isLoding, setIsLoding] = React.useState(false)\r\n  const [checkBox, setCheckBox] = React.useState(true)\r\n\r\n  const [show, setShow] = React.useState(false);\r\n  const showPass = () => setShow(!show);\r\n\r\n  const initialValues = {\r\n    username: '',\r\n    password: ''\r\n  }\r\n  const { errors, values, touched, handleBlur, handleChange, resetForm, handleSubmit } = useFormik({\r\n    initialValues: initialValues,\r\n    validationSchema: loginSchema,\r\n    onSubmit: (values, { resetForm }) => {\r\n      login()\r\n    }\r\n  })\r\n  const navigate = useNavigate()\r\n\r\n  const login = async () => {\r\n    try {\r\n      setIsLoding(true)\r\n      let response = await postApi('api/user/login', values, checkBox)\r\n      if (response && response.status === 200) {\r\n        navigate('/admin')\r\n        toast.success(\"Login Successfully!\")\r\n        resetForm();\r\n      } else {\r\n        toast.error(response.response.data?.error)\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e)\r\n    }\r\n    finally {\r\n      setIsLoding(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DefaultAuth illustrationBackground={illustration} image={illustration}>\r\n      <Flex\r\n        maxW={{ base: \"100%\", md: \"max-content\" }}\r\n        w='100%'\r\n        mx={{ base: \"auto\", lg: \"0px\" }}\r\n        me='auto'\r\n        h='fit-content'\r\n        alignItems='start'\r\n        justifyContent='center'\r\n        mb={{ base: \"30px\", md: \"60px\" }}\r\n        px={{ base: \"25px\", md: \"0px\" }}\r\n        mt={{ base: \"40px\", md: \"14vh\" }}\r\n        flexDirection='column'>\r\n        <Box me='auto'>\r\n          <Heading color={textColor} fontSize='36px' mb='10px'>\r\n            Sign In\r\n          </Heading>\r\n          <Text\r\n            mb='36px'\r\n            ms='4px'\r\n            color={textColorSecondary}\r\n            fontWeight='400'\r\n            fontSize='md'>\r\n            Enter your email and password to sign in!\r\n          </Text>\r\n        </Box>\r\n        <Flex\r\n          zIndex='2'\r\n          direction='column'\r\n          w={{ base: \"100%\", md: \"420px\" }}\r\n          maxW='100%'\r\n          background='transparent'\r\n          borderRadius='15px'\r\n          mx={{ base: \"auto\", lg: \"unset\" }}\r\n          me='auto'\r\n          mb={{ base: \"20px\", md: \"auto\" }}>\r\n          <form onSubmit={handleSubmit}>\r\n            <FormControl isInvalid={errors.username && touched.username} >\r\n              <FormLabel\r\n                display='flex'\r\n                ms='4px'\r\n                fontSize='sm'\r\n                fontWeight='500'\r\n                color={textColor}\r\n                mb='8px'>\r\n                Email<Text color={brandStars}>*</Text>\r\n              </FormLabel>\r\n              <Input\r\n                fontSize='sm'\r\n                onChange={handleChange} onBlur={handleBlur}\r\n                value={values.username}\r\n                name=\"username\"\r\n                ms={{ base: \"0px\", md: \"0px\" }}\r\n                type='email'\r\n                placeholder='mail@simmmple.com'\r\n                mb={errors.username && touched.username ? undefined : '24px'}\r\n                fontWeight='500'\r\n                size='lg'\r\n                borderColor={errors.username && touched.username ? \"red.300\" : null}\r\n                className={errors.username && touched.username ? \"isInvalid\" : null}\r\n              />\r\n              {errors.username && touched.username && <FormErrorMessage mb='24px'> {errors.username}</FormErrorMessage>}\r\n            </FormControl>\r\n\r\n            <FormControl isInvalid={errors.password && touched.password} mb=\"24px\">\r\n              <FormLabel\r\n                ms='4px'\r\n                fontSize='sm'\r\n                fontWeight='500'\r\n                color={textColor}\r\n                display='flex'>\r\n                Password<Text color={brandStars}>*</Text>\r\n              </FormLabel>\r\n              <InputGroup size='md'>\r\n                <Input\r\n                  isRequired={true}\r\n                  fontSize='sm'\r\n                  placeholder='Enter Your Password'\r\n                  name='password'\r\n                  mb={errors.password && touched.password ? undefined : '24px'}\r\n                  value={values.password} onChange={handleChange} onBlur={handleBlur}\r\n                  size='lg'\r\n                  variant='auth'\r\n                  type={show ? \"text\" : \"password\"}\r\n                  borderColor={errors.password && touched.password ? \"red.300\" : null}\r\n                  className={errors.password && touched.password ? \"isInvalid\" : null}\r\n                />\r\n                <InputRightElement display='flex' alignItems='center' mt='4px'>\r\n                  <Icon\r\n                    color={textColorSecondary}\r\n                    _hover={{ cursor: \"pointer\" }}\r\n                    as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}\r\n                    onClick={showPass}\r\n                  />\r\n                </InputRightElement>\r\n              </InputGroup>\r\n              {errors.password && touched.password && <FormErrorMessage mb='24px'> {errors.password}</FormErrorMessage>}\r\n              <Flex justifyContent='space-between' align='center' mb='24px'>\r\n                <FormControl display='flex' alignItems='center'>\r\n                  <Checkbox\r\n                    onChange={(e) => setCheckBox(e.target.checked)}\r\n                    id='remember-login'\r\n                    value={checkBox}\r\n                    defaultChecked\r\n                    colorScheme='brandScheme'\r\n                    me='10px'\r\n                  />\r\n                  <FormLabel\r\n                    htmlFor='remember-login'\r\n                    mb='0'\r\n                    fontWeight='normal'\r\n                    color={textColor}\r\n                    fontSize='sm'>\r\n                    Keep me logged in\r\n                  </FormLabel>\r\n                </FormControl>\r\n              </Flex>\r\n\r\n              <Flex justifyContent='space-between' align='center' mb='24px'>\r\n              </Flex>\r\n              <Button\r\n                fontSize='sm'\r\n                variant='brand'\r\n                fontWeight='500'\r\n                w='100%'\r\n                h='50'\r\n                type=\"submit\"\r\n                mb='24px'\r\n                disabled={isLoding ? true : false}\r\n              >\r\n                {isLoding ? <Spinner /> : 'Sign In'}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Flex>\r\n      </Flex>\r\n    </DefaultAuth>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n"],"names":["Spinner","_jsx","className","contactSchema","yup","firstName","min","required","lastName","title","email","phoneNumber","max","mobileNumber","notRequired","physicalAddress","mailingAddress","preferredContactMethod","leadSource","referralSource","campaignSource","leadStatus","leadRating","leadConversionProbability","emailHistory","phoneCallHistory","meetingHistory","notesandComments","tagsOrLabelsForcategorizingcontacts","birthday","anniversary","keyMilestones","dob","gender","occupation","interestsOrHobbies","communicationFrequency","preferences","linkedInProfile","facebookProfile","twitterHandle","otherProfiles","agentOrTeamMember","internalNotesOrComments","createBy","currentYear","Date","getFullYear","propertySchema","propertyType","propertyAddress","listingPrice","squareFootage","numberofBedrooms","numberofBathrooms","yearBuilt","propertyDescription","lotSize","parkingAvailability","appliancesIncluded","heatingAndCoolingSystems","flooringType","exteriorFeatures","communityAmenities","propertyPhotos","virtualToursOrVideos","floorPlans","propertyDocuments","listingStatus","listingAgentOrTeam","listingDate","marketingDescription","multipleListingService","previousOwners","purchaseHistory","propertyTaxes","homeownersAssociation","mortgageInformation","sellers","buyers","propertyManagers","contractorsOrServiceProviders","leadSchema","leadName","leadEmail","leadPhoneNumber","leadAddress","leadSourceDetails","leadCampaign","leadSourceChannel","leadSourceMedium","leadSourceCampaign","leadSourceReferral","leadAssignedAgent","leadOwner","leadCommunicationPreferences","leadCreationDate","leadConversionDate","leadFollowUpDate","leadFollowUpStatus","leadScore","leadNurturingWorkflow","leadEngagementLevel","leadConversionRate","leadNurturingStage","leadNextAction","userSchema","matches","username","loginSchema","password","emailSchema","sender","recipient","cc","bcc","relatedToContact","relatedToLead","subject","message","createByLead","test","value","this","createError","path","documentSchema","shape","folderName","filename","phoneCallSchema","callDuration","callNotes","category","textMsgSchema","to","createFor","TaskSchema","description","notes","reminder","start","end","backgroundColor","borderColor","textColor","display","url","MeetingSchema","agenda","attendes","of","trim","attendesLead","location","related","dateTime","createdBy","Footer","useColorModeValue","base","lg","Flex","zIndex","flexDirection","alignItems","xl","justifyContent","px","md","pb","children","_jsxs","Text","color","textAlign","mb","getYear","as","fontWeight","ms","Link","target","href","props","illustrationBackground","h","sm","w","maxW","mx","pt","ps","direction","Box","minH","borderBottomLeftRadius","position","overflow","right","style","height","width","bg","concat","justify","align","bgSize","bgPosition","textColorSecondary","brandStars","isLoding","setIsLoding","React","checkBox","setCheckBox","show","setShow","errors","values","touched","handleBlur","handleChange","resetForm","handleSubmit","useFormik","initialValues","validationSchema","onSubmit","_ref","login","navigate","useNavigate","async","response","postApi","_response$response$da","status","toast","success","error","data","e","console","log","DefaultAuth","illustration","image","me","mt","Heading","fontSize","background","borderRadius","FormControl","isInvalid","FormLabel","Input","onChange","onBlur","name","type","placeholder","undefined","size","FormErrorMessage","InputGroup","isRequired","variant","InputRightElement","Icon","_hover","cursor","RiEyeCloseLine","MdOutlineRemoveRedEye","onClick","showPass","Checkbox","checked","id","defaultChecked","colorScheme","htmlFor","Button","disabled"],"sourceRoot":""}