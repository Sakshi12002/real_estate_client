{"version":3,"file":"static/js/445.310128c5.chunk.js","mappings":"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","sources":["components/card/Card.js","components/countUpComponent/countUpComponent.js","components/pagination/Pagination.js","components/spinner/Spinner.js","schema/contactSchema.js","schema/propertySchema.js","schema/leadSchema.js","schema/userSchema.js","schema/loginSchema.js","schema/emailSchema.js","schema/document.js","schema/phoneCallSchema.js","schema/textMsgSchema.js","schema/taskSchema.js","schema/meetingSchema.js","views/admin/contact/Delete.js","views/admin/contact/components/CheckTable.js","views/admin/emailHistory/components/AddEmail.js","views/admin/phoneCall/components/AddPhoneCall.js","../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js"],"sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\nfunction Card(props) {\r\n  const { variant, children, ...rest } = props;\r\n  const styles = useStyleConfig(\"Card\", { variant });\r\n\r\n  return (\r\n    <Box __css={styles} height={'100%'} {...rest}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction CountUpComponent({ targetNumber }) {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (count < targetNumber) {\r\n                setCount(prevCount => prevCount + 1);\r\n            }\r\n        }, targetNumber > 500 ? 0 : 20); // Change the interval duration as needed (in milliseconds)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [count, targetNumber]);\r\n\r\n    return <span>{typeof targetNumber === \"number\" ? count : targetNumber}</span>\r\n}\r\n\r\nexport default CountUpComponent;\r\n","import { ArrowLeftIcon, ArrowRightIcon, ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons';\r\nimport { Flex, IconButton, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Select, Text, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\n\r\nconst Pagination = (props) => {\r\n    const { gotoPage, gopageValue, setGopageValue, pageCount, canPreviousPage, previousPage, canNextPage, pageOptions, setPageSize, nextPage, pageSize, pageIndex } = props\r\n\r\n    useEffect(() => {\r\n        setGopageValue(1)\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <Flex justifyContent=\"space-between\" mt={2} alignItems=\"center\">\r\n            {pageOptions?.length !== 1 && <Flex>\r\n                <Tooltip label=\"First Page\">\r\n                    <IconButton\r\n                        onClick={() => { gotoPage(0); setGopageValue(1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ArrowLeftIcon h={3} w={3} />}\r\n                        mr={4}\r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Previous Page\">\r\n                    <IconButton\r\n                        onClick={() => { previousPage(); setGopageValue((pre) => pre - 1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ChevronLeftIcon h={6} w={6} />}\r\n                    />\r\n                </Tooltip>\r\n            </Flex>}\r\n\r\n            <Flex alignItems=\"center\">\r\n                {pageOptions?.length !== 1 && <>\r\n                    <Text flexShrink=\"0\" mr={8}>\r\n                        Page{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageIndex + 1}\r\n                        </Text>{\" \"}\r\n                        of{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageOptions?.length}\r\n                        </Text>\r\n                    </Text>\r\n                    <Text flexShrink=\"0\">Go to page:</Text>{\" \"}\r\n                    <NumberInput\r\n                        ml={2}\r\n                        mr={8}\r\n                        w={28}\r\n                        min={1}\r\n                        max={pageOptions?.length}\r\n                        value={gopageValue}\r\n                        onChange={(value) => {\r\n                            const page = value ? value - 1 : 0;\r\n                            gotoPage(page);\r\n                            setGopageValue(value)\r\n                        }}\r\n                        defaultValue={pageIndex + 1}\r\n                    >\r\n                        <NumberInputField />\r\n                        <NumberInputStepper>\r\n                            <NumberIncrementStepper />\r\n                            <NumberDecrementStepper />\r\n                        </NumberInputStepper>\r\n                    </NumberInput>\r\n                </>}\r\n                <Select\r\n                    w={32}\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        setPageSize(Number(e.target.value));\r\n                    }}\r\n                >\r\n                    {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </Select>\r\n            </Flex>\r\n\r\n            {pageOptions?.length !== 1 &&\r\n                <Flex>\r\n                    <Tooltip label=\"Next Page\">\r\n                        <IconButton\r\n                            onClick={() => { nextPage(); setGopageValue((pre) => pre + 1) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ChevronRightIcon h={6} w={6} />}\r\n                        />\r\n                    </Tooltip>\r\n                    <Tooltip label=\"Last Page\">\r\n                        <IconButton\r\n                            onClick={() => { gotoPage(pageCount - 1); setGopageValue(pageCount) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ArrowRightIcon h={3} w={3} />}\r\n                            ml={4}\r\n                        />\r\n                    </Tooltip>\r\n                </Flex>}\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import './style.css';\r\nconst Spinner = () => <div className=\"loader\"></div>;\r\n\r\nexport default Spinner;","import * as yup from 'yup'\r\n\r\nexport const contactSchema = yup.object({\r\n    // 1. Basic Information\r\n    firstName: yup.string().min(2).required('First Name is required'),\r\n    lastName: yup.string().min(2).required('Last Name is required'),\r\n    title: yup.string().required('Title is required'),\r\n    email: yup.string().email().required('Email is required'),\r\n    phoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required('Phonenumber is Required'),\r\n    mobileNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').notRequired(),\r\n    physicalAddress: yup.string().required('Physical address is required'),\r\n    mailingAddress: yup.string(),\r\n    preferredContactMethod: yup.string().required('Preferred contact method is required'),\r\n    // 2.Lead Source Information\r\n    leadSource: yup.string(),\r\n    referralSource: yup.string(),\r\n    campaignSource: yup.string(),\r\n    // 3. Status and Classifications\r\n    leadStatus: yup.string(),\r\n    leadRating: yup.number(),\r\n    leadConversionProbability: yup.string(),\r\n    // 5. History:\r\n    emailHistory: yup.string(),\r\n    phoneCallHistory: yup.string(),\r\n    meetingHistory: yup.string(),\r\n    notesandComments: yup.string(),\r\n    // 6. Tags or Categories\r\n    tagsOrLabelsForcategorizingcontacts: yup.string(),\r\n    // 7. Important Dates:\r\n    birthday: yup.date(),\r\n    anniversary: yup.date(),\r\n    keyMilestones: yup.string(),\r\n    // 8. Additional Personal Information\r\n    dob: yup.string(),\r\n    gender: yup.string(),\r\n    occupation: yup.string(),\r\n    interestsOrHobbies: yup.string(),\r\n    // 9. Preferred  Communication Preferences:\r\n    communicationFrequency: yup.string(),\r\n    preferences: yup.string(),\r\n    // 10. Social Media Profiles:\r\n    linkedInProfile: yup.string(),\r\n    facebookProfile: yup.string(),\r\n    twitterHandle: yup.string(),\r\n    otherProfiles: yup.string(),\r\n    // 11. Lead Assignment and Team Collaboration:\r\n    agentOrTeamMember: yup.string(),\r\n    internalNotesOrComments: yup.string(),\r\n    createBy: yup.string(),\r\n    // 12. Custom Fields:\r\n})","import * as yup from 'yup'\r\nconst currentYear = new Date().getFullYear()\r\n\r\nexport const propertySchema = yup.object({\r\n    // 1. basicPropertyInformation:\r\n    propertyType: yup.string().required(\"Property Type Is required\"),\r\n    propertyAddress: yup.string().required(\"Property Address Is required\"),\r\n    listingPrice: yup.string().required(\"Listing Price Is required\"),\r\n    squareFootage: yup.string().required(\"Square Footage Is required\"),\r\n    numberofBedrooms: yup.number().required(\"Number Of Bedrooms Is required\"),\r\n    numberofBathrooms: yup.number().required(\"Number Of Bathrooms Is required\"),\r\n    yearBuilt: yup.number().min(1000).max(currentYear).required(\"Year Built Is required\"),\r\n    propertyDescription: yup.string().required(\"Property Description Is required\"),\r\n    //2. Property Features and Amenities:\r\n    lotSize: yup.string(),\r\n    parkingAvailability: yup.string(),\r\n    appliancesIncluded: yup.string(),\r\n    heatingAndCoolingSystems: yup.string(),\r\n    flooringType: yup.string(),\r\n    exteriorFeatures: yup.string(),\r\n    communityAmenities: yup.string(),\r\n    //3. Media and Visuals:\r\n    propertyPhotos: yup.string(),\r\n    virtualToursOrVideos: yup.string(),\r\n    floorPlans: yup.string(),\r\n    propertyDocuments: yup.string(),\r\n    //4. Listing and Marketing Details:\r\n    listingStatus: yup.string(),\r\n    listingAgentOrTeam: yup.string(),\r\n    listingDate: yup.string(),\r\n    marketingDescription: yup.string(),\r\n    multipleListingService: yup.string(),\r\n    //5. Property History:\r\n    previousOwners: yup.number().min(0),\r\n    purchaseHistory: yup.string(),\r\n    //6. Financial Information:\r\n    propertyTaxes: yup.string(),\r\n    homeownersAssociation: yup.string(),\r\n    mortgageInformation: yup.string(),\r\n    //7. Contacts Associated with Property:\r\n    sellers: yup.string(),\r\n    buyers: yup.string(),\r\n    propertyManagers: yup.string(),\r\n    contractorsOrServiceProviders: yup.string(),\r\n    //8. Property Notes and Comments:\r\n    internalNotesOrComments: yup.string(),\r\n    //9. Custom Fields\r\n})","import * as yup from 'yup'\r\n\r\nexport const leadSchema = yup.object({\r\n    // Lead Information:\r\n    leadName: yup.string().required(\"Lead Name Is required\"),\r\n    leadEmail: yup.string().email().required(\"Lead Email Is required\"),\r\n    leadPhoneNumber: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Lead Phone Number Is required\"),\r\n    leadAddress: yup.string().required(\"Lead Address Is required\"),\r\n    // Lead Source and Details:\r\n    leadSource: yup.string(),\r\n    leadStatus: yup.string(),\r\n    leadSourceDetails: yup.string(),\r\n    leadCampaign: yup.string(),\r\n    leadSourceChannel: yup.string(),\r\n    leadSourceMedium: yup.string(),\r\n    leadSourceCampaign: yup.string(),\r\n    leadSourceReferral: yup.string(),\r\n    // Lead Assignment and Ownership:\r\n    leadAssignedAgent: yup.string(),\r\n    leadOwner: yup.string(),\r\n    leadCommunicationPreferences: yup.string(),\r\n    // Lead Dates and Follow-up:\r\n    leadCreationDate: yup.date().required(\"Lead Creation Date Is required\"),\r\n    leadConversionDate: yup.date().required(\"Lead Conversion Date Is required\"),\r\n    leadFollowUpDate: yup.date().required(\"lead Follow Up Date  Is required\"),\r\n    leadFollowUpStatus: yup.string(),\r\n    // Lead Scoring and Nurturing:\r\n    leadScore: yup.number().required(\"Lead Score Is required\"),\r\n    leadNurturingWorkflow: yup.string(),\r\n    leadEngagementLevel: yup.string(),\r\n    leadConversionRate: yup.number().required(\"lead Conversion Rate Is required\"),\r\n    leadNurturingStage: yup.string(),\r\n    leadNextAction: yup.string(),\r\n})\r\n","import * as yup from 'yup'\r\n\r\nexport const userSchema = yup.object({\r\n    firstName: yup.string().required(\"First Name Is required\"),\r\n    lastName: yup.string(),\r\n    phoneNumber: yup.string().required(\"Phone Number Is required\").matches(/^\\d{10}$/, \"Phone Number must be exactly 10 digits\"),\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n})","import * as yup from 'yup'\r\n\r\nexport const loginSchema = yup.object({\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n    password: yup.string().required(\"Password Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const emailSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    recipient: yup.string().email().required(\"Recipient Is required\"),\r\n    cc: yup.string().email(),\r\n    bcc: yup.string().email(),\r\n    relatedToContact: yup.string(),\r\n    relatedToLead: yup.string(),\r\n    subject: yup.string(),\r\n    message: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\n\r\n// Define the yup schema for the main document\r\nexport const documentSchema = yup.object().shape({\r\n    folderName: yup.string().required('Folder Name is required'),\r\n    filename: yup.string().min(2, 'File Name Must Be At Least 2 Characters'),\r\n    createBy: yup.string().required()\r\n});\r\n\r\n","import * as yup from 'yup'\r\n\r\nexport const phoneCallSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    // recipient: yup.number().min(99999999, 'Phone number is invalid length').max(999999999999, 'Phone number is invalid').required(\"Recipient Is required\"),\r\n    recipient: yup.number().required(\"Recipient Is required\"),\r\n    callDuration: yup.string(),\r\n    callNotes: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n    category: yup.string()\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\nexport const textMsgSchema = yup.object({\r\n    sender: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Sender Is required\"),\r\n    to: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"To Is required\"),\r\n    message: yup.string(),\r\n    createFor: yup.string().required(\"Create By Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const TaskSchema = yup.object({\r\n    title: yup.string().required(\"Title Is required\"),\r\n    category: yup.string(),\r\n    description: yup.string(),\r\n    notes: yup.string(),\r\n    // assignmentTo: yup.string(),\r\n    // assignmentToLead: yup.string(),\r\n    reminder: yup.string(),\r\n    start: yup.string().required(\"Start Is required\"),\r\n    end: yup.string(),\r\n    backgroundColor: yup.string(),\r\n    borderColor: yup.string(),\r\n    textColor: yup.string(),\r\n    display: yup.string(),\r\n    url: yup.string(),\r\n    createBy: yup.string(),\r\n})","import * as yup from 'yup'\r\n\r\nexport const MeetingSchema = yup.object({\r\n    agenda: yup.string().required(\"Agenda Is required\"),\r\n    attendes: yup.array().of(yup.string().trim()),\r\n    attendesLead: yup.array().of(yup.string().trim()),\r\n    location: yup.string(),\r\n    related: yup.string(),\r\n    dateTime: yup.string().required(\"Date Time Is required\"),\r\n    notes: yup.string(),\r\n    createFor: yup.string(),\r\n    createdBy: yup.string(),\r\n})","import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { deleteManyApi } from 'services/api';\r\nimport { deleteApi } from 'services/api';\r\n\r\nconst Delete = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n    const handleDeleteClick = async () => {\r\n        if (props.method === 'one') {\r\n            try {\r\n                setIsLoding(true)\r\n                const response = await deleteApi(props.url, props.id)\r\n                if (response.status === 200) {\r\n                    navigate('/contacts')\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        } else if (props.method === 'many') {\r\n            try {\r\n                setIsLoding(true)\r\n                let response = await deleteManyApi(props.url, props.data)\r\n                if (response.status === 200) {\r\n                    props.setSelectedValues([])\r\n                    props.onClose(false)\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleClose = () => {\r\n        props.onClose(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Delete Contact{props.method === 'one' ? '' : 's'}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        Are You Sure To Delete selated Contact{props.method === 'one' ? '' : 's'} ?\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"red\" mr={2} onClick={handleDeleteClick} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Yes'}</Button>\r\n                        <Button variant=\"outline\" onClick={handleClose}>No</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Delete\r\n","import {\r\n  Box,\r\n  Checkbox,\r\n  Flex,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddEmailHistory from \"views/admin/emailHistory/components/AddEmail\";\r\nimport AddPhoneCall from \"views/admin/phoneCall/components/AddPhoneCall\";\r\nimport Delete from \"../Delete\";\r\n\r\nexport default function CheckTable(props) {\r\n  const { columnsData, tableData, fetchData, isLoding } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n\r\n  const [deleteModel, setDelete] = useState(false);\r\n  const [selectedId, setSelectedId] = useState()\r\n  const [gopageValue, setGopageValue] = useState()\r\n  // const [data, setData] = useState([])\r\n  const data = useMemo(() => tableData, [tableData]);\r\n\r\n  // const fetchData = async () => {\r\n  //   let result = await getApi('api/contact/');\r\n  //   setData(result.data);\r\n  // }\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  const [addEmailHistory, setAddEmailHistory] = useState(false);\r\n  const [addPhoneCall, setAddPhoneCall] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if (fetchData) fetchData()\r\n  }, [deleteModel, props.isOpen])\r\n\r\n  return (\r\n    <Card\r\n      direction=\"column\"\r\n      w=\"100%\"\r\n      px=\"0px\"\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}\r\n    >\r\n      <AddEmailHistory fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={selectedId} />\r\n      <AddPhoneCall fetchData={fetchData} isOpen={addPhoneCall} onClose={setAddPhoneCall} id={selectedId} />\r\n\r\n      <Flex px=\"25px\" justify=\"space-between\" mb=\"20px\" align=\"center\">\r\n        <Text\r\n          color={textColor}\r\n          fontSize=\"22px\"\r\n          fontWeight=\"700\"\r\n          lineHeight=\"100%\"\r\n        >\r\n          Contacts (<CountUpComponent targetNumber={data?.length} />)\r\n        </Text>\r\n        {/* <Menu /> */}\r\n        {selectedValues.length > 0 && <DeleteIcon onClick={() => setDelete(true)} color={'red'} />}\r\n      </Flex>\r\n      {/* Delete model */}\r\n      <Delete isOpen={deleteModel} onClose={setDelete} setSelectedValues={setSelectedValues} url='api/contact/deleteMany' data={selectedValues} method='many' />\r\n\r\n      <Box overflowY={\"auto\"} className=\"table-fix-container\">\r\n        <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n          <Thead>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers?.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      justify=\"space-between\"\r\n                      align=\"center\"\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color=\"gray.400\"\r\n                    >\r\n                      {column.render(\"Header\")}\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody {...getTableBodyProps()}>\r\n            {isLoding ?\r\n              <Tr>\r\n                <Td colSpan={columns?.length}>\r\n                  <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    <Spinner />\r\n                  </Flex>\r\n                </Td>\r\n              </Tr>\r\n              : data?.length === 0 ? (\r\n                <Tr>\r\n                  <Td colSpan={columns.length}>\r\n                    <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                      -- No Data Found --\r\n                    </Text>\r\n                  </Td>\r\n                </Tr>\r\n              ) : data?.length > 0 && page?.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <Tr {...row?.getRowProps()} key={i}>\r\n                    {row?.cells?.map((cell, index) => {\r\n                      let data = \"\";\r\n                      if (cell?.column.Header === \"#\") {\r\n                        data = (\r\n                          <Flex align=\"center\">\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                              {cell?.row?.index + 1}\r\n                            </Text>\r\n                          </Flex>\r\n                        );\r\n                      } else if (cell?.column.Header === \"title\") {\r\n                        data = (\r\n                          <Text\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"first Name\") {\r\n                        data = (\r\n                          <Link to={user?.role !== 'admin' ? `/contactView/${cell?.row?.original._id}` : `/admin/contactView/${cell?.row?.original._id}`}>\r\n                            <Text\r\n                              me=\"10px\"\r\n                              sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                              color='green.400'\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              {cell?.value}\r\n                            </Text>\r\n                          </Link>\r\n                        );\r\n                      } else if (cell?.column.Header === \"last Name\") {\r\n                        data = (\r\n                          <Text\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"phone Number\") {\r\n                        data = (\r\n                          <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                            onClick={() => {\r\n                              setAddPhoneCall(true)\r\n                              setSelectedId(cell?.row?.values._id)\r\n                            }}\r\n                            color='green.400' sx={{ cursor: 'pointer', '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"Email Address\") {\r\n                        data = (\r\n                          <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                            onClick={() => {\r\n                              setAddEmailHistory(true)\r\n                              setSelectedId(cell?.row?.values._id)\r\n                            }}\r\n                            color='green.400' sx={{ cursor: 'pointer', '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"physical Address\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"mailing Address\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"Contact Method\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <Td\r\n                          {...cell?.getCellProps()}\r\n                          key={index}\r\n                          fontSize={{ sm: \"14px\" }}\r\n                          minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                          borderColor=\"transparent\"\r\n                        >\r\n                          {data}\r\n                        </Td>\r\n                      );\r\n                    })}\r\n                  </Tr>\r\n                );\r\n              })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card >\r\n  );\r\n}\r\n","import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, Textarea } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { BsFillSendFill } from 'react-icons/bs';\r\nimport { emailSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\n\r\n\r\nconst AddEmailHistory = (props) => {\r\n    const { onClose, isOpen, fetchData } = props\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n    const [isLoding, setIsLoding] = useState(false)\r\n    const [contactModelOpen, setContactModel] = useState(false);\r\n    const [leadModelOpen, setLeadModel] = useState(false);\r\n\r\n    const initialValues = {\r\n        sender: user?._id,\r\n        recipient: '',\r\n        subject: '',\r\n        message: '',\r\n        createBy: '',\r\n        createByLead: '',\r\n        startDate: '',\r\n        endDate: '',\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: emailSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/email/add', values)\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                fetchData()\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const fetchRecipientData = async () => {\r\n        if (props.id && props.lead !== 'true') {\r\n            let response = await getApi('api/contact/view/', props.id)\r\n            if (response?.status === 200) {\r\n                setFieldValue('recipient', response?.data?.contact?.email);\r\n                setFieldValue('createBy', props.id);\r\n                values.recipient = response?.data?.contact?.email\r\n            }\r\n        } else if (props.id && props.lead === 'true') {\r\n            let response = await getApi('api/lead/view/', props.id)\r\n            if (response?.status === 200) {\r\n                setFieldValue('recipient', response?.data?.lead?.leadEmail);\r\n                setFieldValue('createByLead', props.id);\r\n                values.recipient = response?.data?.lead?.leadEmail\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRecipientData()\r\n    }, [props.id])\r\n\r\n    return (\r\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Send Email </ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Recipient<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.recipient}\r\n                                name=\"recipient\"\r\n                                placeholder='Recipient'\r\n                                fontWeight='500'\r\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Subject\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                placeholder='Enter subject'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.subject}\r\n                                name=\"subject\"\r\n                                fontWeight='500'\r\n                                borderColor={errors.subject && touched.subject ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Start Date\r\n                            </FormLabel>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.startDate}\r\n                                name=\"startDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                End Date\r\n                            </FormLabel>\r\n                            <Input\r\n                                type='datetime-local'\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.endDate}\r\n                                name=\"endDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.endDate && touched?.endDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.endDate && touched.endDate && errors.endDate}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Message\r\n                            </FormLabel>\r\n                            <Textarea\r\n                                fontSize='sm'\r\n                                placeholder='Here Type message'\r\n                                resize={'none'}\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.message}\r\n                                name=\"message\"\r\n                                fontWeight='500'\r\n                                borderColor={errors.message && touched.message ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>\r\n                        </GridItem>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' onClick={handleSubmit} rightIcon={<BsFillSendFill />} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Send'}</Button>\r\n                    <Button onClick={() => {\r\n                        formik.resetForm()\r\n                        onClose()\r\n                    }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddEmailHistory\r\n","import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, Textarea } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport { useEffect, useState } from 'react';\r\nimport { BsFillTelephoneFill } from 'react-icons/bs';\r\nimport { phoneCallSchema } from 'schema';\r\nimport { getApi, postApi } from 'services/api';\r\n\r\nconst AddPhoneCall = (props) => {\r\n    const { onClose, isOpen, fetchData } = props\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const user = JSON.parse(localStorage.getItem('user'))\r\n\r\n    const initialValues = {\r\n        sender: user?._id,\r\n        recipient: '',\r\n        callDuration: '',\r\n        callNotes: '',\r\n        createBy: '',\r\n        createByLead: '',\r\n        startDate: '',\r\n        endDate: '',\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: phoneCallSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/phoneCall/add', values)\r\n            if (response.status === 200) {\r\n                props.onClose();\r\n                fetchData()\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    const fetchDataR = async () => {\r\n        if (props.id && props.lead !== 'true') {\r\n            let response = await getApi('api/contact/view/', props.id)\r\n            if (response?.status === 200) {\r\n                setFieldValue('recipient', response?.data?.contact?.phoneNumber);\r\n                setFieldValue('createBy', props?.id);\r\n                values.recipient = response?.data?.contact?.phoneNumber\r\n            }\r\n        } else if (props.id && props.lead === 'true') {\r\n            let response = await getApi('api/lead/view/', props.id)\r\n            if (response?.status === 200) {\r\n                setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);\r\n                setFieldValue('createByLead', props.id);\r\n                values.recipient = response?.data?.lead?.leadPhoneNumber\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDataR()\r\n    }, [props.id])\r\n\r\n\r\n    return (\r\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Add Call </ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Recipient<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                type='number'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.recipient}\r\n                                name=\"recipient\"\r\n                                placeholder='Recipient'\r\n                                fontWeight='500'\r\n                                borderColor={errors.recipient && touched.recipient ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Start Date\r\n                            </FormLabel>\r\n                            <Input\r\n                                type=\"datetime-local\"\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.startDate}\r\n                                name=\"startDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.startDate && touched?.startDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12, md: 6 }} >\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                End Date\r\n                            </FormLabel>\r\n                            <Input\r\n                                type='datetime-local'\r\n                                fontSize='sm'\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.endDate}\r\n                                name=\"endDate\"\r\n                                fontWeight='500'\r\n                                borderColor={errors?.endDate && touched?.endDate ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.endDate && touched.endDate && errors.endDate}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Call Duration<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.callDuration}\r\n                                name=\"callDuration\"\r\n                                placeholder='call Duration'\r\n                                fontWeight='500'\r\n                                borderColor={errors.callDuration && touched.callDuration ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.callDuration && touched.callDuration && errors.callDuration}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Call Notes\r\n                            </FormLabel>\r\n                            <Textarea\r\n                                resize={'none'}\r\n                                fontSize='sm'\r\n                                placeholder='Enter Call Notes'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.callNotes}\r\n                                name=\"callNotes\"\r\n                                fontWeight='500'\r\n                                borderColor={errors.callNotes && touched.callNotes ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>\r\n                        </GridItem>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' leftIcon={<BsFillTelephoneFill />} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Call'}</Button>\r\n                    <Button onClick={() => {\r\n                        formik.resetForm()\r\n                        onClose()\r\n                    }}>Close</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddPhoneCall\r\n","import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n"],"names":["props","variant","children","rest","styles","useStyleConfig","_jsx","Box","__css","height","_ref","targetNumber","count","setCount","useState","useEffect","interval","setInterval","prevCount","clearInterval","gotoPage","gopageValue","setGopageValue","pageCount","canPreviousPage","previousPage","canNextPage","pageOptions","setPageSize","nextPage","pageSize","pageIndex","_jsxs","Flex","justifyContent","mt","alignItems","length","Tooltip","label","IconButton","onClick","isDisabled","icon","ArrowLeftIcon","h","w","mr","pre","ChevronLeftIcon","_Fragment","Text","flexShrink","fontWeight","as","NumberInput","ml","min","max","value","onChange","defaultValue","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","Select","e","Number","target","map","ChevronRightIcon","ArrowRightIcon","Spinner","className","contactSchema","yup","firstName","required","lastName","title","email","phoneNumber","mobileNumber","notRequired","physicalAddress","mailingAddress","preferredContactMethod","leadSource","referralSource","campaignSource","leadStatus","leadRating","leadConversionProbability","emailHistory","phoneCallHistory","meetingHistory","notesandComments","tagsOrLabelsForcategorizingcontacts","birthday","anniversary","keyMilestones","dob","gender","occupation","interestsOrHobbies","communicationFrequency","preferences","linkedInProfile","facebookProfile","twitterHandle","otherProfiles","agentOrTeamMember","internalNotesOrComments","createBy","currentYear","Date","getFullYear","propertySchema","propertyType","propertyAddress","listingPrice","squareFootage","numberofBedrooms","numberofBathrooms","yearBuilt","propertyDescription","lotSize","parkingAvailability","appliancesIncluded","heatingAndCoolingSystems","flooringType","exteriorFeatures","communityAmenities","propertyPhotos","virtualToursOrVideos","floorPlans","propertyDocuments","listingStatus","listingAgentOrTeam","listingDate","marketingDescription","multipleListingService","previousOwners","purchaseHistory","propertyTaxes","homeownersAssociation","mortgageInformation","sellers","buyers","propertyManagers","contractorsOrServiceProviders","leadSchema","leadName","leadEmail","leadPhoneNumber","leadAddress","leadSourceDetails","leadCampaign","leadSourceChannel","leadSourceMedium","leadSourceCampaign","leadSourceReferral","leadAssignedAgent","leadOwner","leadCommunicationPreferences","leadCreationDate","leadConversionDate","leadFollowUpDate","leadFollowUpStatus","leadScore","leadNurturingWorkflow","leadEngagementLevel","leadConversionRate","leadNurturingStage","leadNextAction","userSchema","matches","username","loginSchema","password","emailSchema","sender","recipient","cc","bcc","relatedToContact","relatedToLead","subject","message","createByLead","test","this","createError","path","documentSchema","shape","folderName","filename","phoneCallSchema","callDuration","callNotes","category","textMsgSchema","to","createFor","TaskSchema","description","notes","reminder","start","end","backgroundColor","borderColor","textColor","display","url","MeetingSchema","agenda","attendes","of","trim","attendesLead","location","related","dateTime","createdBy","isLoding","setIsLoding","navigate","useNavigate","Modal","onClose","isOpen","isCentered","ModalOverlay","ModalContent","ModalHeader","method","ModalCloseButton","ModalBody","ModalFooter","Button","colorScheme","async","deleteApi","id","status","error","console","log","deleteManyApi","data","setSelectedValues","disabled","handleClose","CheckTable","columnsData","tableData","fetchData","useColorModeValue","columns","useMemo","selectedValues","deleteModel","setDelete","selectedId","setSelectedId","user","JSON","parse","localStorage","getItem","tableInstance","useTable","initialState","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","state","addEmailHistory","setAddEmailHistory","addPhoneCall","setAddPhoneCall","Card","direction","px","overflowX","sm","lg","AddEmailHistory","AddPhoneCall","justify","mb","align","color","fontSize","lineHeight","CountUpComponent","DeleteIcon","Delete","overflowY","Table","Thead","headerGroup","index","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","colSpan","width","textAlign","row","i","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","isChecked","includes","event","handleCheckboxChange","checked","prevSelectedValues","filter","selectedValue","me","_cell$row2","_cell$row3","Link","role","concat","original","_id","sx","textDecoration","_cell$row4","values","cursor","_cell$row5","getCellProps","minW","md","Pagination","contactModelOpen","setContactModel","leadModelOpen","setLeadModel","initialValues","startDate","endDate","formik","useFormik","validationSchema","onSubmit","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","postApi","lead","response","getApi","_response$data","_response$data$contac","_response$data2","_response$data2$conta","contact","_response$data3","_response$data3$lead","_response$data4","_response$data4$lead","fetchRecipientData","Grid","templateColumns","gap","GridItem","base","FormLabel","ms","Input","onBlur","name","placeholder","type","Textarea","resize","rightIcon","BsFillSendFill","fetchDataR","leftIcon","BsFillTelephoneFill","_extends","Object","assign","arguments","source","prototype","hasOwnProperty","call","apply","_excluded","forwardRef","ref","_omitThemingProps","omitThemingProps","rows","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","textarea","cx","__DEV__","displayName"],"sourceRoot":""}