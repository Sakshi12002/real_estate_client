{"version":3,"file":"static/js/8179.8085d712.chunk.js","mappings":"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","sources":["components/card/Card.js","components/countUpComponent/countUpComponent.js","components/pagination/Pagination.js","components/spinner/Spinner.js","schema/contactSchema.js","schema/propertySchema.js","schema/leadSchema.js","schema/userSchema.js","schema/loginSchema.js","schema/emailSchema.js","schema/document.js","schema/phoneCallSchema.js","schema/textMsgSchema.js","schema/taskSchema.js","schema/meetingSchema.js","views/admin/users/Add.js","views/admin/users/Delete.js","views/admin/users/components/CheckTable.js","views/admin/users/index.js"],"sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\nfunction Card(props) {\r\n  const { variant, children, ...rest } = props;\r\n  const styles = useStyleConfig(\"Card\", { variant });\r\n\r\n  return (\r\n    <Box __css={styles} height={'100%'} {...rest}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction CountUpComponent({ targetNumber }) {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (count < targetNumber) {\r\n                setCount(prevCount => prevCount + 1);\r\n            }\r\n        }, targetNumber > 500 ? 0 : 20); // Change the interval duration as needed (in milliseconds)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [count, targetNumber]);\r\n\r\n    return <span>{typeof targetNumber === \"number\" ? count : targetNumber}</span>\r\n}\r\n\r\nexport default CountUpComponent;\r\n","import { ArrowLeftIcon, ArrowRightIcon, ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons';\r\nimport { Flex, IconButton, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Select, Text, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\n\r\nconst Pagination = (props) => {\r\n    const { gotoPage, gopageValue, setGopageValue, pageCount, canPreviousPage, previousPage, canNextPage, pageOptions, setPageSize, nextPage, pageSize, pageIndex } = props\r\n\r\n    useEffect(() => {\r\n        setGopageValue(1)\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <Flex justifyContent=\"space-between\" mt={2} alignItems=\"center\">\r\n            {pageOptions?.length !== 1 && <Flex>\r\n                <Tooltip label=\"First Page\">\r\n                    <IconButton\r\n                        onClick={() => { gotoPage(0); setGopageValue(1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ArrowLeftIcon h={3} w={3} />}\r\n                        mr={4}\r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Previous Page\">\r\n                    <IconButton\r\n                        onClick={() => { previousPage(); setGopageValue((pre) => pre - 1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ChevronLeftIcon h={6} w={6} />}\r\n                    />\r\n                </Tooltip>\r\n            </Flex>}\r\n\r\n            <Flex alignItems=\"center\">\r\n                {pageOptions?.length !== 1 && <>\r\n                    <Text flexShrink=\"0\" mr={8}>\r\n                        Page{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageIndex + 1}\r\n                        </Text>{\" \"}\r\n                        of{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageOptions?.length}\r\n                        </Text>\r\n                    </Text>\r\n                    <Text flexShrink=\"0\">Go to page:</Text>{\" \"}\r\n                    <NumberInput\r\n                        ml={2}\r\n                        mr={8}\r\n                        w={28}\r\n                        min={1}\r\n                        max={pageOptions?.length}\r\n                        value={gopageValue}\r\n                        onChange={(value) => {\r\n                            const page = value ? value - 1 : 0;\r\n                            gotoPage(page);\r\n                            setGopageValue(value)\r\n                        }}\r\n                        defaultValue={pageIndex + 1}\r\n                    >\r\n                        <NumberInputField />\r\n                        <NumberInputStepper>\r\n                            <NumberIncrementStepper />\r\n                            <NumberDecrementStepper />\r\n                        </NumberInputStepper>\r\n                    </NumberInput>\r\n                </>}\r\n                <Select\r\n                    w={32}\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        setPageSize(Number(e.target.value));\r\n                    }}\r\n                >\r\n                    {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </Select>\r\n            </Flex>\r\n\r\n            {pageOptions?.length !== 1 &&\r\n                <Flex>\r\n                    <Tooltip label=\"Next Page\">\r\n                        <IconButton\r\n                            onClick={() => { nextPage(); setGopageValue((pre) => pre + 1) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ChevronRightIcon h={6} w={6} />}\r\n                        />\r\n                    </Tooltip>\r\n                    <Tooltip label=\"Last Page\">\r\n                        <IconButton\r\n                            onClick={() => { gotoPage(pageCount - 1); setGopageValue(pageCount) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ArrowRightIcon h={3} w={3} />}\r\n                            ml={4}\r\n                        />\r\n                    </Tooltip>\r\n                </Flex>}\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import './style.css';\r\nconst Spinner = () => <div className=\"loader\"></div>;\r\n\r\nexport default Spinner;","import * as yup from 'yup'\r\n\r\nexport const contactSchema = yup.object({\r\n    // 1. Basic Information\r\n    firstName: yup.string().min(2).required('First Name is required'),\r\n    lastName: yup.string().min(2).required('Last Name is required'),\r\n    title: yup.string().required('Title is required'),\r\n    email: yup.string().email().required('Email is required'),\r\n    phoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required('Phonenumber is Required'),\r\n    mobileNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').notRequired(),\r\n    physicalAddress: yup.string().required('Physical address is required'),\r\n    mailingAddress: yup.string(),\r\n    preferredContactMethod: yup.string().required('Preferred contact method is required'),\r\n    // 2.Lead Source Information\r\n    leadSource: yup.string(),\r\n    referralSource: yup.string(),\r\n    campaignSource: yup.string(),\r\n    // 3. Status and Classifications\r\n    leadStatus: yup.string(),\r\n    leadRating: yup.number(),\r\n    leadConversionProbability: yup.string(),\r\n    // 5. History:\r\n    emailHistory: yup.string(),\r\n    phoneCallHistory: yup.string(),\r\n    meetingHistory: yup.string(),\r\n    notesandComments: yup.string(),\r\n    // 6. Tags or Categories\r\n    tagsOrLabelsForcategorizingcontacts: yup.string(),\r\n    // 7. Important Dates:\r\n    birthday: yup.date(),\r\n    anniversary: yup.date(),\r\n    keyMilestones: yup.string(),\r\n    // 8. Additional Personal Information\r\n    dob: yup.string(),\r\n    gender: yup.string(),\r\n    occupation: yup.string(),\r\n    interestsOrHobbies: yup.string(),\r\n    // 9. Preferred  Communication Preferences:\r\n    communicationFrequency: yup.string(),\r\n    preferences: yup.string(),\r\n    // 10. Social Media Profiles:\r\n    linkedInProfile: yup.string(),\r\n    facebookProfile: yup.string(),\r\n    twitterHandle: yup.string(),\r\n    otherProfiles: yup.string(),\r\n    // 11. Lead Assignment and Team Collaboration:\r\n    agentOrTeamMember: yup.string(),\r\n    internalNotesOrComments: yup.string(),\r\n    createBy: yup.string(),\r\n    // 12. Custom Fields:\r\n})","import * as yup from 'yup'\r\nconst currentYear = new Date().getFullYear()\r\n\r\nexport const propertySchema = yup.object({\r\n    // 1. basicPropertyInformation:\r\n    propertyType: yup.string().required(\"Property Type Is required\"),\r\n    propertyAddress: yup.string().required(\"Property Address Is required\"),\r\n    listingPrice: yup.string().required(\"Listing Price Is required\"),\r\n    squareFootage: yup.string().required(\"Square Footage Is required\"),\r\n    numberofBedrooms: yup.number().required(\"Number Of Bedrooms Is required\"),\r\n    numberofBathrooms: yup.number().required(\"Number Of Bathrooms Is required\"),\r\n    yearBuilt: yup.number().min(1000).max(currentYear).required(\"Year Built Is required\"),\r\n    propertyDescription: yup.string().required(\"Property Description Is required\"),\r\n    //2. Property Features and Amenities:\r\n    lotSize: yup.string(),\r\n    parkingAvailability: yup.string(),\r\n    appliancesIncluded: yup.string(),\r\n    heatingAndCoolingSystems: yup.string(),\r\n    flooringType: yup.string(),\r\n    exteriorFeatures: yup.string(),\r\n    communityAmenities: yup.string(),\r\n    //3. Media and Visuals:\r\n    propertyPhotos: yup.string(),\r\n    virtualToursOrVideos: yup.string(),\r\n    floorPlans: yup.string(),\r\n    propertyDocuments: yup.string(),\r\n    //4. Listing and Marketing Details:\r\n    listingStatus: yup.string(),\r\n    listingAgentOrTeam: yup.string(),\r\n    listingDate: yup.string(),\r\n    marketingDescription: yup.string(),\r\n    multipleListingService: yup.string(),\r\n    //5. Property History:\r\n    previousOwners: yup.number().min(0),\r\n    purchaseHistory: yup.string(),\r\n    //6. Financial Information:\r\n    propertyTaxes: yup.string(),\r\n    homeownersAssociation: yup.string(),\r\n    mortgageInformation: yup.string(),\r\n    //7. Contacts Associated with Property:\r\n    sellers: yup.string(),\r\n    buyers: yup.string(),\r\n    propertyManagers: yup.string(),\r\n    contractorsOrServiceProviders: yup.string(),\r\n    //8. Property Notes and Comments:\r\n    internalNotesOrComments: yup.string(),\r\n    //9. Custom Fields\r\n})","import * as yup from 'yup'\r\n\r\nexport const leadSchema = yup.object({\r\n    // Lead Information:\r\n    leadName: yup.string().required(\"Lead Name Is required\"),\r\n    leadEmail: yup.string().email().required(\"Lead Email Is required\"),\r\n    leadPhoneNumber: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Lead Phone Number Is required\"),\r\n    leadAddress: yup.string().required(\"Lead Address Is required\"),\r\n    // Lead Source and Details:\r\n    leadSource: yup.string(),\r\n    leadStatus: yup.string(),\r\n    leadSourceDetails: yup.string(),\r\n    leadCampaign: yup.string(),\r\n    leadSourceChannel: yup.string(),\r\n    leadSourceMedium: yup.string(),\r\n    leadSourceCampaign: yup.string(),\r\n    leadSourceReferral: yup.string(),\r\n    // Lead Assignment and Ownership:\r\n    leadAssignedAgent: yup.string(),\r\n    leadOwner: yup.string(),\r\n    leadCommunicationPreferences: yup.string(),\r\n    // Lead Dates and Follow-up:\r\n    leadCreationDate: yup.date().required(\"Lead Creation Date Is required\"),\r\n    leadConversionDate: yup.date().required(\"Lead Conversion Date Is required\"),\r\n    leadFollowUpDate: yup.date().required(\"lead Follow Up Date  Is required\"),\r\n    leadFollowUpStatus: yup.string(),\r\n    // Lead Scoring and Nurturing:\r\n    leadScore: yup.number().required(\"Lead Score Is required\"),\r\n    leadNurturingWorkflow: yup.string(),\r\n    leadEngagementLevel: yup.string(),\r\n    leadConversionRate: yup.number().required(\"lead Conversion Rate Is required\"),\r\n    leadNurturingStage: yup.string(),\r\n    leadNextAction: yup.string(),\r\n})\r\n","import * as yup from 'yup'\r\n\r\nexport const userSchema = yup.object({\r\n    firstName: yup.string().required(\"First Name Is required\"),\r\n    lastName: yup.string(),\r\n    phoneNumber: yup.string().required(\"Phone Number Is required\").matches(/^\\d{10}$/, \"Phone Number must be exactly 10 digits\"),\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n})","import * as yup from 'yup'\r\n\r\nexport const loginSchema = yup.object({\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n    password: yup.string().required(\"Password Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const emailSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    recipient: yup.string().email().required(\"Recipient Is required\"),\r\n    cc: yup.string().email(),\r\n    bcc: yup.string().email(),\r\n    relatedToContact: yup.string(),\r\n    relatedToLead: yup.string(),\r\n    subject: yup.string(),\r\n    message: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\n\r\n// Define the yup schema for the main document\r\nexport const documentSchema = yup.object().shape({\r\n    folderName: yup.string().required('Folder Name is required'),\r\n    filename: yup.string().min(2, 'File Name Must Be At Least 2 Characters'),\r\n    createBy: yup.string().required()\r\n});\r\n\r\n","import * as yup from 'yup'\r\n\r\nexport const phoneCallSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    // recipient: yup.number().min(99999999, 'Phone number is invalid length').max(999999999999, 'Phone number is invalid').required(\"Recipient Is required\"),\r\n    recipient: yup.number().required(\"Recipient Is required\"),\r\n    callDuration: yup.string(),\r\n    callNotes: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n    category: yup.string()\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\nexport const textMsgSchema = yup.object({\r\n    sender: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Sender Is required\"),\r\n    to: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"To Is required\"),\r\n    message: yup.string(),\r\n    createFor: yup.string().required(\"Create By Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const TaskSchema = yup.object({\r\n    title: yup.string().required(\"Title Is required\"),\r\n    category: yup.string(),\r\n    description: yup.string(),\r\n    notes: yup.string(),\r\n    // assignmentTo: yup.string(),\r\n    // assignmentToLead: yup.string(),\r\n    reminder: yup.string(),\r\n    start: yup.string().required(\"Start Is required\"),\r\n    end: yup.string(),\r\n    backgroundColor: yup.string(),\r\n    borderColor: yup.string(),\r\n    textColor: yup.string(),\r\n    display: yup.string(),\r\n    url: yup.string(),\r\n    createBy: yup.string(),\r\n})","import * as yup from 'yup'\r\n\r\nexport const MeetingSchema = yup.object({\r\n    agenda: yup.string().required(\"Agenda Is required\"),\r\n    attendes: yup.array().of(yup.string().trim()),\r\n    attendesLead: yup.array().of(yup.string().trim()),\r\n    location: yup.string(),\r\n    related: yup.string(),\r\n    dateTime: yup.string().required(\"Date Time Is required\"),\r\n    notes: yup.string(),\r\n    createFor: yup.string(),\r\n    createdBy: yup.string(),\r\n})","import { CloseIcon, PhoneIcon } from '@chakra-ui/icons';\r\nimport { Button, FormLabel, Grid, GridItem, Icon, IconButton, Input, InputGroup, InputLeftElement, InputRightElement, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useFormik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { MdOutlineRemoveRedEye } from 'react-icons/md';\r\nimport { RiEyeCloseLine } from 'react-icons/ri';\r\nimport { toast } from 'react-toastify';\r\nimport { userSchema } from 'schema';\r\nimport { postApi } from 'services/api';\r\n\r\n\r\nconst AddUser = (props) => {\r\n    const { onClose, isOpen, fetchData } = props\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const [show, setShow] = React.useState(false);\r\n    const showPass = () => setShow(!show);\r\n\r\n    const initialValues = {\r\n        firstName: '',\r\n        lastName: '',\r\n        username: '',\r\n        phoneNumber: '',\r\n        password: '',\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: userSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddData();\r\n            resetForm();\r\n        },\r\n    });\r\n    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik\r\n\r\n    const AddData = async () => {\r\n        try {\r\n            setIsLoding(true)\r\n            let response = await postApi('api/user/register', values)\r\n            if (response && response.status === 200) {\r\n                props.onClose();\r\n                // fetchData()\r\n            } else {\r\n                toast.error(response.response.data?.message)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoding(false)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} isCentered>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader justifyContent='space-between' display='flex' >\r\n                    Add User\r\n                    <IconButton onClick={onClose} icon={<CloseIcon />} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                First Name\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.firstName}\r\n                                name=\"firstName\"\r\n                                placeholder='firstName'\r\n                                fontWeight='500'\r\n                                borderColor={errors.firstName && touched.firstName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.firstName && touched.firstName && errors.firstName}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Last Name\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.lastName}\r\n                                name=\"lastName\"\r\n                                placeholder='Last Name'\r\n                                fontWeight='500'\r\n                                borderColor={errors.lastName && touched.lastName ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.lastName && touched.lastName && errors.lastName}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Email\r\n                            </FormLabel>\r\n                            <Input\r\n                                fontSize='sm'\r\n                                type='email'\r\n                                onChange={handleChange} onBlur={handleBlur}\r\n                                value={values.username}\r\n                                name=\"username\"\r\n                                placeholder='Email Address'\r\n                                fontWeight='500'\r\n                                borderColor={errors.username && touched.username ? \"red.300\" : null}\r\n                            />\r\n                            <Text mb='10px' color={'red'}> {errors.username && touched.username && errors.username}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Phone Number<Text color={\"red\"}>*</Text>\r\n                            </FormLabel>\r\n                            <InputGroup>\r\n                                <InputLeftElement\r\n                                    pointerEvents=\"none\"\r\n                                    children={<PhoneIcon color=\"gray.300\" borderRadius=\"16px\" />}\r\n                                />\r\n                                <Input type=\"tel\"\r\n                                    fontSize='sm'\r\n                                    onChange={handleChange} onBlur={handleBlur}\r\n                                    value={values.phoneNumber}\r\n                                    name=\"phoneNumber\"\r\n                                    fontWeight='500'\r\n                                    borderColor={errors.phoneNumber && touched.phoneNumber ? \"red.300\" : null}\r\n                                    placeholder=\"Phone number\" borderRadius=\"16px\" />\r\n                            </InputGroup>\r\n                            <Text mb='10px' color={'red'}>{errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}</Text>\r\n                        </GridItem>\r\n                        <GridItem colSpan={{ base: 12 }}>\r\n                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>\r\n                                Password\r\n                            </FormLabel>\r\n                            <InputGroup size='md'>\r\n                                <Input\r\n                                    isRequired={true}\r\n                                    fontSize='sm'\r\n                                    placeholder='Enter Your Password'\r\n                                    name='password'\r\n                                    size='lg'\r\n                                    variant='auth'\r\n                                    type={show ? \"text\" : \"password\"}\r\n                                    value={values.password} onChange={handleChange} onBlur={handleBlur}\r\n                                    borderColor={errors.password && touched.password ? \"red.300\" : null}\r\n                                    className={errors.password && touched.password ? \"isInvalid\" : null}\r\n                                />\r\n                                <InputRightElement display='flex' alignItems='center' mt='4px'>\r\n                                    <Icon\r\n                                        color={'gray.400'}\r\n                                        _hover={{ cursor: \"pointer\" }}\r\n                                        as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}\r\n                                        onClick={showPass}\r\n                                    />\r\n                                </InputRightElement>\r\n                            </InputGroup>\r\n                            <Text mb='10px' color={'red'}> {errors.password && touched.password && errors.password}</Text>\r\n                        </GridItem>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button variant='brand' disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Add'}</Button>\r\n                    <Button onClick={() => {\r\n                        formik.resetForm()\r\n                        onClose()\r\n                    }}>Clear</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default AddUser\r\n","import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';\r\nimport Spinner from 'components/spinner/Spinner';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { deleteApi, deleteManyApi } from 'services/api';\r\n\r\nconst Delete = (props) => {\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n    const handleDeleteClick = async () => {\r\n        if (props.method === 'one') {\r\n            try {\r\n                setIsLoding(true)\r\n                const response = await deleteApi(props.url, props.id)\r\n                if (response.status === 200) {\r\n                    navigate('/admin/user')\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        } else if (props.method === 'many') {\r\n            try {\r\n                setIsLoding(true)\r\n                let response = await deleteManyApi(props.url, props.data)\r\n                if (response.status === 200) {\r\n                    props.setSelectedValues([])\r\n                    props.onClose(false)\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n            finally {\r\n                setIsLoding(false)\r\n            }\r\n        }\r\n    };\r\n    const handleClose = () => {\r\n        props.onClose(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Delete User{props.method === 'one' ? '' : 's'}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        Are You Sure To Delete selated User{props.method === 'one' ? '' : 's'} ?\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"red\" mr={2} onClick={handleDeleteClick} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Yes'}</Button>\r\n                        <Button variant=\"outline\" onClick={handleClose}>No</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Delete\r\n","import {\r\n  Box,\r\n  Checkbox,\r\n  Flex,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getApi } from \"services/api\";\r\nimport Delete from \"../Delete\";\r\n\r\nexport default function CheckTable(props) {\r\n  const { columnsData } = props;\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [deleteModel, setDelete] = useState(false);\r\n  // const data = useMemo(() => tableData, [tableData]);\r\n  const [data, setData] = useState([])\r\n  const [isLoding, setIsLoding] = useState(false)\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const fetchData = async () => {\r\n    setIsLoding(true)\r\n    let result = await getApi('api/user/');\r\n    setData(result.data?.user);\r\n    setIsLoding(false)\r\n  }\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [deleteModel, props.isOpen])\r\n\r\n  return (\r\n    <Card\r\n      direction=\"column\"\r\n      w=\"100%\"\r\n      px=\"0px\"\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}\r\n    >\r\n      <Flex px=\"25px\" justify=\"space-between\" mb=\"20px\" align=\"center\">\r\n        <Text\r\n          color={textColor}\r\n          fontSize=\"22px\"\r\n          fontWeight=\"700\"\r\n          lineHeight=\"100%\"\r\n        >\r\n          Users (<CountUpComponent targetNumber={data?.length} />)\r\n        </Text>\r\n        {/* <Menu /> */}\r\n        {selectedValues.length > 0 && <DeleteIcon onClick={() => setDelete(true)} color={'red'} />}\r\n      </Flex>\r\n      {/* Delete model */}\r\n      <Delete isOpen={deleteModel} onClose={setDelete} setSelectedValues={setSelectedValues} url='api/user/deleteMany' data={selectedValues} method='many' />\r\n\r\n      <Box overflowY={\"auto\"} className=\"table-fix-container\">\r\n        <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n          <Thead>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers?.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      justify=\"space-between\"\r\n                      align=\"center\"\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color=\"gray.400\"\r\n                    >\r\n                      {column.render(\"Header\")}\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody {...getTableBodyProps()}>\r\n            {isLoding ?\r\n              <Tr>\r\n                <Td colSpan={columns?.length}>\r\n                  <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    <Spinner />\r\n                  </Flex>\r\n                </Td>\r\n              </Tr>\r\n              : data?.length === 0 ? (\r\n                <Tr>\r\n                  <Td colSpan={columns.length}>\r\n                    <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                      -- No Data Found --\r\n                    </Text>\r\n                  </Td>\r\n                </Tr>\r\n              ) : page?.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <Tr {...row?.getRowProps()} key={i}>\r\n                    {row?.cells?.map((cell, index) => {\r\n                      let data = \"\";\r\n                      if (cell?.column.Header === \"#\") {\r\n                        data = (\r\n                          <Flex align=\"center\" >\r\n                            {cell?.row?.original?.role !== 'admin' ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> : <Text me=\"28px\"></Text>}\r\n                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                              {cell?.row?.index + 1}\r\n                            </Text>\r\n                          </Flex>\r\n                        );\r\n                      } else if (cell?.column.Header === \"email Id\") {\r\n                        data = (\r\n                          <Link to={user?.role !== 'admin' ? `/userView/${cell?.row?.values._id}` : `/admin/userView/${cell?.row?.values._id}`}>\r\n                            <Text\r\n                              me=\"10px\"\r\n                              sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                              color='green.400'\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              {cell?.value}\r\n                            </Text>\r\n                          </Link>\r\n                        );\r\n                      } else if (cell?.column.Header === \"first Name\") {\r\n                        data = (\r\n                          <Text\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value ? cell?.value : ' - '}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"last Name\") {\r\n                        data = (\r\n                          <Text\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value ? cell?.value : ' - '}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"role\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <Td\r\n                          {...cell?.getCellProps()}\r\n                          key={index}\r\n                          fontSize={{ sm: \"14px\" }}\r\n                          minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                          borderColor=\"transparent\"\r\n                        >\r\n                          {data}\r\n                        </Td>\r\n                      );\r\n                    })}\r\n                  </Tr>\r\n                );\r\n              })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card >\r\n  );\r\n}\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Button, Grid, GridItem, useDisclosure } from '@chakra-ui/react';\r\nimport Add from \"./Add\";\r\nimport CheckTable from './components/CheckTable';\r\n\r\nconst Index = () => {\r\n    const columns = [\r\n        {\r\n            Header: \"#\",\r\n            accessor: \"_id\",\r\n            isSortable: false,\r\n            width: 10\r\n        },\r\n        { Header: 'email Id', accessor: 'username' },\r\n        { Header: \"first Name\", accessor: \"firstName\", },\r\n        { Header: \"last Name\", accessor: \"lastName\", },\r\n        { Header: \"role\", accessor: \"role\", },\r\n\r\n    ];\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const size = \"lg\";\r\n\r\n    const handleClick = () => {\r\n        onOpen()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid templateColumns=\"repeat(6, 1fr)\" mb={3} gap={1}>\r\n                <GridItem colStart={6} textAlign={\"right\"}>\r\n                    <Button onClick={() => handleClick()} leftIcon={<AddIcon />} variant=\"brand\">Add</Button>\r\n                </GridItem>\r\n            </Grid>\r\n            <CheckTable isOpen={isOpen} columnsData={columns} />\r\n            {/* Add Form */}\r\n            <Add isOpen={isOpen} size={size} onClose={onClose} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n"],"names":["props","variant","children","rest","styles","useStyleConfig","_jsx","Box","__css","height","_ref","targetNumber","count","setCount","useState","useEffect","interval","setInterval","prevCount","clearInterval","gotoPage","gopageValue","setGopageValue","pageCount","canPreviousPage","previousPage","canNextPage","pageOptions","setPageSize","nextPage","pageSize","pageIndex","_jsxs","Flex","justifyContent","mt","alignItems","length","Tooltip","label","IconButton","onClick","isDisabled","icon","ArrowLeftIcon","h","w","mr","pre","ChevronLeftIcon","_Fragment","Text","flexShrink","fontWeight","as","NumberInput","ml","min","max","value","onChange","defaultValue","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","Select","e","Number","target","map","ChevronRightIcon","ArrowRightIcon","Spinner","className","contactSchema","yup","firstName","required","lastName","title","email","phoneNumber","mobileNumber","notRequired","physicalAddress","mailingAddress","preferredContactMethod","leadSource","referralSource","campaignSource","leadStatus","leadRating","leadConversionProbability","emailHistory","phoneCallHistory","meetingHistory","notesandComments","tagsOrLabelsForcategorizingcontacts","birthday","anniversary","keyMilestones","dob","gender","occupation","interestsOrHobbies","communicationFrequency","preferences","linkedInProfile","facebookProfile","twitterHandle","otherProfiles","agentOrTeamMember","internalNotesOrComments","createBy","currentYear","Date","getFullYear","propertySchema","propertyType","propertyAddress","listingPrice","squareFootage","numberofBedrooms","numberofBathrooms","yearBuilt","propertyDescription","lotSize","parkingAvailability","appliancesIncluded","heatingAndCoolingSystems","flooringType","exteriorFeatures","communityAmenities","propertyPhotos","virtualToursOrVideos","floorPlans","propertyDocuments","listingStatus","listingAgentOrTeam","listingDate","marketingDescription","multipleListingService","previousOwners","purchaseHistory","propertyTaxes","homeownersAssociation","mortgageInformation","sellers","buyers","propertyManagers","contractorsOrServiceProviders","leadSchema","leadName","leadEmail","leadPhoneNumber","leadAddress","leadSourceDetails","leadCampaign","leadSourceChannel","leadSourceMedium","leadSourceCampaign","leadSourceReferral","leadAssignedAgent","leadOwner","leadCommunicationPreferences","leadCreationDate","leadConversionDate","leadFollowUpDate","leadFollowUpStatus","leadScore","leadNurturingWorkflow","leadEngagementLevel","leadConversionRate","leadNurturingStage","leadNextAction","userSchema","matches","username","loginSchema","password","emailSchema","sender","recipient","cc","bcc","relatedToContact","relatedToLead","subject","message","createByLead","test","this","createError","path","documentSchema","shape","folderName","filename","phoneCallSchema","callDuration","callNotes","category","textMsgSchema","to","createFor","TaskSchema","description","notes","reminder","start","end","backgroundColor","borderColor","textColor","display","url","MeetingSchema","agenda","attendes","of","trim","attendesLead","location","related","dateTime","createdBy","onClose","isOpen","fetchData","isLoding","setIsLoding","show","setShow","React","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","AddData","errors","touched","handleBlur","handleChange","handleSubmit","setFieldValue","async","response","postApi","_response$response$da","status","toast","error","data","console","log","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","CloseIcon","ModalBody","Grid","templateColumns","gap","GridItem","colSpan","base","FormLabel","ms","fontSize","mb","Input","onBlur","name","placeholder","color","type","InputGroup","InputLeftElement","pointerEvents","PhoneIcon","borderRadius","size","isRequired","InputRightElement","Icon","_hover","cursor","RiEyeCloseLine","MdOutlineRemoveRedEye","showPass","ModalFooter","Button","disabled","navigate","useNavigate","method","ModalCloseButton","colorScheme","deleteApi","id","deleteManyApi","setSelectedValues","handleClose","CheckTable","columnsData","useColorModeValue","columns","useMemo","selectedValues","user","JSON","parse","localStorage","getItem","deleteModel","setDelete","setData","tableInstance","useTable","initialState","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","state","_result$data","result","getApi","Card","direction","px","overflowX","sm","lg","justify","align","lineHeight","CountUpComponent","DeleteIcon","Delete","overflowY","Table","Thead","headerGroup","index","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","width","textAlign","row","i","_row$cells","getRowProps","cells","cell","_cell$row","_cell$row$original","_cell$row2","Header","original","role","Checkbox","isChecked","includes","event","handleCheckboxChange","checked","prevSelectedValues","filter","selectedValue","me","_cell$row3","_cell$row4","Link","concat","_id","sx","textDecoration","getCellProps","minW","md","Pagination","Index","onOpen","useDisclosure","colStart","leftIcon","AddIcon","accessor","Add"],"sourceRoot":""}